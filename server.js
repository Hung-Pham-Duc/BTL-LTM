const express = require('express'); // Import th∆∞ vi·ªán express ƒë·ªÉ t·∫°o ·ª©ng d·ª•ng web
const app = express();   // Kh·ªüi t·∫°o m·ªôt ·ª©ng d·ª•ng express
const http = require('http').createServer(app); // T·∫°o m·ªôt HTTP server t·ª´ ·ª©ng d·ª•ng express
const io = require('socket.io')(http);  // Kh·ªüi t·∫°o Socket.IO server v√† li√™n k·∫øt v·ªõi HTTP server
const path = require('path');  // Import th∆∞ vi·ªán path ƒë·ªÉ l√†m vi·ªác v·ªõi ƒë∆∞·ªùng d·∫´n t·ªáp v√† th∆∞ m·ª•c

//C·∫•u h√¨nh
const PORT = process.env.PORT || 8000;

// Ph·ª•c v·ª• file tƒ©nh trong public
app.use(express.static(path.join(__dirname, 'public')));

// Khi truy c·∫≠p "/", tr·∫£ v·ªÅ index.html 
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

//  Qu·∫£n l√Ω ph√≤ng 
let rooms = {}; // { roomId: { players: [{id, username}], boardNumbers: {}, gameActive: false } }
let chatMessages = []; // M·∫£ng l∆∞u tr·ªØ tin nh·∫Øn chat
let connectedUsers = 0; // ƒê·∫øm s·ªë ng∆∞·ªùi d√πng ƒëang k·∫øt n·ªëi

//  Qu·∫£n l√Ω tung ƒë·ªìng xu 
let coinToss = {
    roomId: null, // ID c·ªßa ph√≤ng ƒëang th·ª±c hi·ªán tung ƒë·ªìng xu
    player1: null, // Socket ID c·ªßa ng∆∞·ªùi ch∆°i th·ª© 1
    player2: null, // Socket ID c·ªßa ng∆∞·ªùi ch∆°i th·ª© 2
    player1Choice: null, // L·ª±a ch·ªçn m·∫∑t ƒë·ªìng xu c·ªßa ng∆∞·ªùi ch∆°i th·ª© 1
    player2Choice: null, // L·ª±a ch·ªçn m·∫∑t ƒë·ªìng xu c·ªßa ng∆∞·ªùi ch∆°i th·ª© 2
    result: null, // K·∫øt qu·∫£ c·ªßa l·∫ßn tung ƒë·ªìng xu 
    ready: false, // Th√¥ng b√°o c·∫£ hai ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn m·∫∑t ƒë·ªìng xu ch∆∞a
    firstChooser: null //Socket ID c·ªßa ng∆∞·ªùi ch∆°i ch·ªçn m·∫∑t ƒë·ªìng xu ƒë·∫ßu ti√™n trong v√°n hi·ªán t·∫°i
};

// H√†m reset tr·∫°ng th√°i c·ªßa coinToss trong ph√≤ng
function resetCoinToss(roomId) {
    coinToss = {
        roomId: roomId,
        player1: null,
        player2: null,
        player1Choice: null,
        player2Choice: null,
        result: null,
        ready: false,
        firstChooser: null // Reset c·∫£ bi·∫øn n√†y khi reset coinToss
    };
}

// Qu·∫£n l√Ω ph√≤ng update 
// H√†m n√†y tr·∫£ v·ªÅ th√¥ng tin c·ªßa c√°c ph√≤ng ƒëang c√≥ ng∆∞·ªùi ch∆°i
function getRoomsInfo() {
    const roomsInfo = {};
    for (const [roomId, room] of Object.entries(rooms)) {  // Duy·ªát qua t·ª´ng ph√≤ng trong 'rooms'
        if (room.players.length > 0) { // Ch·ªâ l·∫•y ph√≤ng c√≥ 1 ng∆∞·ªùi ch∆°i
            roomsInfo[roomId] = {
                players: room.players,
                gameActive: room.gameActive
            };
        }
    }
    return roomsInfo;
}

//  X·ª≠ l√Ω socket.io 
io.on('connection', (socket) => {
    console.log('üîµ Ng∆∞·ªùi d√πng m·ªõi k·∫øt n·ªëi:', socket.id);
    connectedUsers++; //Bi·∫øn ƒë·∫øm s·ªë ng∆∞·ªùi v√†o socket.io

    // N·∫øu ƒë√¢y l√† ng∆∞·ªùi d√πng ƒë·∫ßu ti√™n, kh·ªüi t·∫°o l·∫°i l·ªãch s·ª≠ chat
    if (connectedUsers === 1) {
        chatMessages = [];
        console.log('‚ú® Kh·ªüi t·∫°o l·ªãch s·ª≠ chat m·ªõi');
    }

    // G·ª≠i l·ªãch s·ª≠ chat (n·∫øu c√≥) cho ng∆∞·ªùi d√πng m·ªõi
    socket.emit('allChatMessages', chatMessages);

    // Update all clients with current rooms
    socket.on('requestRooms', () => {
        socket.emit('updateRooms', getRoomsInfo());
    });

    // X·ª≠ l√Ω chat
    socket.on('sendMessage', (data) => {
        const { message, sender } = data;
        const newMessage = { sender, message };

        chatMessages.push(newMessage); // Th√™m tin nh·∫Øn m·ªõi v√†o m·∫£ng 

        // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng tin nh·∫Øn ƒë∆∞·ª£c l∆∞u tr·ªØ 
        if (chatMessages.length > 100) {
            chatMessages.shift(); // X√≥a tin nh·∫Øn ƒë·∫ßu ti√™n
        }

        io.emit('chatMessage', newMessage); // G·ª≠i tin nh·∫Øn m·ªõi cho t·∫•t c·∫£

        console.log(`‚úâÔ∏è Message from ${sender}: ${message}`); // In ra console n·ªôi dung tin nh·∫Øn v√† ng∆∞·ªùi g·ª≠i
    });

    // T·∫°o ph√≤ng
    socket.on('createRoom', (username) => {
        const roomId = Math.random().toString(36).substr(2, 6).toUpperCase(); // T·∫°o m·ªôt ID ph√≤ng ng·∫´u nhi√™n
        rooms[roomId] = {
            players: [{ id: socket.id, username }],
            boardNumbers: {},
            gameActive: false
        };
        socket.join(roomId);
        socket.roomId = roomId; // L∆∞u roomId v√†o socket ƒë·ªÉ d·ªÖ truy c·∫≠p
        socket.emit('roomCreated', { roomId, username });
        socket.emit('waitingForOpponent', roomId);

        // Broadcast system message
        io.emit('chatMessage', {
            sender: 'H·ªá th·ªëng',
            message: `${username} ƒë√£ t·∫°o ph√≤ng ${roomId}`,
            type: 'system'
        });

        // Update rooms list for all clients
        io.emit('updateRooms', getRoomsInfo());

        console.log(`‚úÖ Room ${roomId} created by ${username} (${socket.id})`);
    });

    // Tham gia ph√≤ng
    socket.on('joinRoom', (data) => {
        const { roomId, username } = data;

        // Ki·ªÉm tra ph√≤ng t·ªìn t·∫°i v√† c√≤n ch·ªó
        if (rooms[roomId]) {
            if (rooms[roomId].players.length < 2) {
                // L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i ƒë·∫ßu ti√™n
                const firstPlayer = rooms[roomId].players[0];

                // Th√™m ng∆∞·ªùi ch∆°i m·ªõi v√†o ph√≤ng
                rooms[roomId].players.push({ id: socket.id, username });
                socket.join(roomId);
                socket.roomId = roomId;

                // Th√¥ng b√°o cho ng∆∞·ªùi ch∆°i ƒë√£ tham gia ph√≤ng th√†nh c√¥ng
                socket.emit('joinedRoom', {
                    roomId,
                    opponent: firstPlayer
                });

                // Th√¥ng b√°o cho ng∆∞·ªùi ch∆°i ƒë·∫ßu ti√™n bi·∫øt c√≥ ng∆∞·ªùi tham gia
                io.to(firstPlayer.id).emit('playerJoined', {
                    player: { id: socket.id, username }
                });

                // Broadcast system message
                io.emit('chatMessage', {
                    sender: 'H·ªá th·ªëng',
                    message: `${username} ƒë√£ tham gia ph√≤ng ${roomId}`,
                    type: 'system'
                });

                // N·∫øu c√≥ ƒë·ªß 2 ng∆∞·ªùi ch∆°i, b·∫Øt ƒë·∫ßu tung ƒë·ªìng xu
                if (rooms[roomId].players.length === 2) {
                    resetCoinToss(roomId);
                    coinToss.roomId = roomId;
                    coinToss.player1 = rooms[roomId].players[0].id;
                    coinToss.player2 = rooms[roomId].players[1].id;
                    io.to(roomId).emit('startCoinToss'); // B√°o cho client b·∫Øt ƒë·∫ßu tung xu
                } else {
                    socket.emit('waitingForOpponent', roomId);
                }

                checkGameStart(roomId); // Check if game can start
                // Update rooms list for all clients
                io.emit('updateRooms', getRoomsInfo());

                console.log(`üë§ Player ${username} (${socket.id}) joined room ${roomId}`);
            } else {
                // Ch·ªâ g·ª≠i th√¥ng b√°o l·ªói n·∫øu ph√≤ng ƒë√£ ƒë·ªß (>= 2) ng∆∞·ªùi
                if (rooms[roomId].players.length >= 2) {
                    socket.emit('errorMessage', 'Ph√≤ng ƒë√£ ƒë·ªß ng∆∞·ªùi.');
                }
            }
        } else {
            socket.emit('errorMessage', 'Ph√≤ng kh√¥ng t·ªìn t·∫°i.');
        }
    });

    // X·ª≠ l√Ω ch·ªçn m·∫∑t ƒë·ªìng xu
    socket.on('chooseCoinSide', (data) => {
        const { roomId, choice } = data;
        if (coinToss.roomId === roomId) {
            if (!coinToss.firstChooser) {
                coinToss.firstChooser = socket.id;
                if (socket.id === coinToss.player1) {
                    coinToss.player1Choice = choice;
                } else if (socket.id === coinToss.player2) {
                    coinToss.player2Choice = choice;
                }
            } else {
                if (socket.id !== coinToss.firstChooser) {
                    if (coinToss.player1Choice && choice === coinToss.player1Choice) {
                        // Ng∆∞·ªùi ch∆°i 2 ch·ªçn tr√πng, t·ª± ƒë·ªông ƒë·ªïi v√† th√¥ng b√°o
                        const forcedChoice = choice === 'h√¨nh' ? 'ch·ªØ' : 'h√¨nh';
                        if (socket.id === coinToss.player1) {
                            coinToss.player1Choice = forcedChoice;
                        } else if (socket.id === coinToss.player2) {
                            coinToss.player2Choice = forcedChoice;
                        }
                        io.to(roomId).emit('forceCoinSide', forcedChoice); // Th√¥ng b√°o cho client
                    } else if (coinToss.player2Choice && choice === coinToss.player2Choice) {
                        // Ng∆∞·ªùi ch∆°i 2 ch·ªçn tr√πng, t·ª± ƒë·ªông ƒë·ªïi v√† th√¥ng b√°o
                        const forcedChoice = choice === 'h√¨nh' ? 'ch·ªØ' : 'h√¨nh';
                        if (socket.id === coinToss.player1) {
                            coinToss.player1Choice = forcedChoice;
                        } else if (socket.id === coinToss.player2) {
                            coinToss.player2Choice = forcedChoice;
                        }
                        io.to(roomId).emit('forceCoinSide', forcedChoice); // Th√¥ng b√°o cho client
                    } else {
                        if (socket.id === coinToss.player1) {
                            coinToss.player1Choice = choice;
                        } else if (socket.id === coinToss.player2) {
                            coinToss.player2Choice = choice;
                        }
                    }
                } else {
                    // Ng∆∞·ªùi ch∆°i ƒë·∫ßu ti√™n ch·ªçn l·∫°i th√¨ cho ph√©p
                    if (socket.id === coinToss.player1) {
                        coinToss.player1Choice = choice;
                    } else if (socket.id === coinToss.player2) {
                        coinToss.player2Choice = choice;
                    }
                }
            }

            // Ki·ªÉm tra xem c·∫£ hai ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn ch∆∞a
            if (coinToss.player1Choice && coinToss.player2Choice) {
                // X√°c ƒë·ªãnh k·∫øt qu·∫£ d·ª±a tr√™n l·ª±a ch·ªçn
                coinToss.result = Math.random() < 0.5 ? "ch·ªØ" : "h√¨nh";
                let firstPlayerId = (coinToss.player1Choice === coinToss.result) ? coinToss.player1 : coinToss.player2;

                io.to(roomId).emit('coinTossResult', {
                    result: coinToss.result,
                    firstPlayerId: firstPlayerId,
                    player1Choice: coinToss.player1Choice, // G·ª≠i l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi ch∆°i 1
                    player2Choice: coinToss.player2Choice  // G·ª≠i l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi ch∆°i 2
                });

                resetCoinToss(roomId);
            }
        }
    });

    // Nh·∫≠n b·∫£ng s·ªë t·ª´ ng∆∞·ªùi ch∆°i
    socket.on('boardNumbers', (data) => {
        const { roomId, numbers, username } = data;
        if (rooms[roomId]) {
            rooms[roomId].boardNumbers[socket.id] = numbers;
            console.log(`üìã Received board numbers from ${username} (${socket.id}) in room ${roomId}`);

            // Ki·ªÉm tra n·∫øu ƒë·ªß 2 ng∆∞·ªùi ch∆°i v√† ƒë·ªß b·∫£ng s·ªë th√¨ b·∫Øt ƒë·∫ßu game
            checkGameStart(roomId);
        }
    });

    // ƒê√°nh d·∫•u s·ªë
    socket.on('markNumber', (data) => {
        const { roomId, number } = data;
        if (rooms[roomId] && rooms[roomId].gameActive) {
            // G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi ch∆°i trong ph√≤ng v·ªÅ s·ªë ƒë∆∞·ª£c ƒë√°nh d·∫•u
            io.to(roomId).emit('numberMarked', {
                number,
                markerId: socket.id
            });

            console.log(`üéØ Player ${socket.id} marked number ${number} in room ${roomId}`);
        }
    });

    // X·ª≠ l√Ω khi c√≥ ng∆∞·ªùi th·∫Øng
    socket.on('gameWon', (roomId) => {
        if (roomId && rooms[roomId]) {
            rooms[roomId].gameActive = false;
            io.to(roomId).emit('gameWon', {
                winner: socket.id
            });
            console.log(`üèÜ Player ${socket.id} won in room ${roomId}`);
        }
    });

    // X·ª≠ l√Ω ch∆°i l·∫°i
    socket.on('playAgain', (roomId) => {
        if (roomId && rooms[roomId]) {
            // Reset th√¥ng tin game
            rooms[roomId].boardNumbers = {};
            rooms[roomId].gameActive = false;

            // B·∫Øt ƒë·∫ßu l·∫°i qu√° tr√¨nh tung ƒë·ªìng xu
            resetCoinToss(roomId);
            coinToss.roomId = roomId;
            coinToss.player1 = rooms[roomId].players[0].id;
            coinToss.player2 = rooms[roomId].players[1].id;
            io.to(roomId).emit('startCoinToss'); // B√°o cho client b·∫Øt ƒë·∫ßu tung xu

            // Th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i trong ph√≤ng
            io.to(roomId).emit('gameRestart');
            console.log(`üîÑ Game restarted in room ${roomId}`);
        }
    });

    // X·ª≠ l√Ω r·ªùi ph√≤ng
    socket.on('leaveRoom', (roomId) => {
        if (leaveRoom(socket, roomId)) {
            // Update rooms list for all clients
            io.emit('updateRooms', getRoomsInfo());
        }
    });

    // Ng·∫Øt k·∫øt n·ªëi
    socket.on('disconnect', () => {
        console.log('üî¥ Ng∆∞·ªùi d√πng ng·∫Øt k·∫øt n·ªëi:', socket.id);
        connectedUsers--;

        // Kh√¥ng c·∫ßn x√≥a chatMessages ·ªü ƒë√¢y. N√≥ s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c gi·∫£i ph√≥ng
        // khi kh√¥ng c√≤n ai k·∫øt n·ªëi v√† bi·∫øn connectedUsers = 0.

        console.log(`üë§ S·ªë ng∆∞·ªùi d√πng c√≤n l·∫°i: ${connectedUsers}`);

        // T√¨m ph√≤ng c·ªßa ng∆∞·ªùi ch∆°i b·ªã ng·∫Øt k·∫øt n·ªëi
        const roomId = socket.roomId;
        if (roomId) {
            if (leaveRoom(socket, roomId)) {
                // Update rooms list for all clients
                io.emit('updateRooms', getRoomsInfo());
            }
        }
    });
});

// Modified leaveRoom function to return whether the room list should be updated
function leaveRoom(socket, roomId) {
    let shouldUpdateRooms = false;

    if (roomId && rooms[roomId]) {
        // Get username before removing
        const player = rooms[roomId].players.find(p => p.id === socket.id);
        const username = player ? player.username : 'Ng∆∞·ªùi ch∆°i';

        // Th√¥ng b√°o cho nh·ªØng ng∆∞·ªùi c√≤n l·∫°i trong ph√≤ng
        socket.to(roomId).emit('playerLeft', {
            playerId: socket.id,
            message: `${username} ƒë√£ r·ªùi ph√≤ng.`
        });

        // X√≥a ng∆∞·ªùi ch∆°i kh·ªèi ph√≤ng
        if (rooms[roomId].players) {
            rooms[roomId].players = rooms[roomId].players.filter(player => player.id !== socket.id);
        }

        // X√≥a b·∫£ng s·ªë c·ªßa ng∆∞·ªùi ch∆°i
        if (rooms[roomId].boardNumbers && rooms[roomId].boardNumbers[socket.id]) {
            delete rooms[roomId].boardNumbers[socket.id];
        }

        // Broadcast system message
        io.emit('chatMessage', {
            sender: 'H·ªá th·ªëng',
            message: `${username} ƒë√£ r·ªùi kh·ªèi ph√≤ng ${roomId}`,
            type: 'system'
        });

        shouldUpdateRooms = true;

        // X√≥a ph√≤ng n·∫øu kh√¥ng c√≤n ai
        if (rooms[roomId].players.length === 0) {
            delete rooms[roomId];
            console.log(`‚ùå Room ${roomId} deleted (no players remaining)`);
        }

        // R·ªùi kh·ªèi ph√≤ng Socket.IO
        socket.leave(roomId);
        delete socket.roomId;

        console.log(`üëã Player ${socket.id} left room ${roomId}`);
    }

    return shouldUpdateRooms;
}

// Helper function to check if game should start
function checkGameStart(roomId) {
    const room = rooms[roomId];
    if (!room) return;

    // N·∫øu c√≥ 2 ng∆∞·ªùi ch∆°i v√† ƒë·ªß b·∫£ng s·ªë
    if (room.players.length === 2 &&
        Object.keys(room.boardNumbers).length === 2) {

        // B·∫Øt ƒë·∫ßu game
        room.gameActive = true;

        // G·ª≠i th√¥ng tin b·∫Øt ƒë·∫ßu game cho c√°c ng∆∞·ªùi ch∆°i
        io.to(roomId).emit('startGame', {
            roomId,
            players: room.players
        });

        console.log(`üöÄ Game started in room ${roomId}`);
        io.emit('updateRooms', getRoomsInfo()); // Update room list
    }
}

// --- Kh·ªüi ƒë·ªông server ---
http.listen(PORT, () => {
    console.log(`üöÄ Server is running at http://localhost:${PORT}`);
});