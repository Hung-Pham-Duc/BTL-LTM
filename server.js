const express = require('express'); 
const app = express();   
const http = require('http').createServer(app); 
const io = require('socket.io')(http); 
const path = require('path');  

//C·∫•u h√¨nh
const PORT = process.env.PORT || 8000;

// Ph·ª•c v·ª• file tƒ©nh trong public
app.use(express.static(path.join(__dirname, 'public')));

// Khi truy c·∫≠p "/", tr·∫£ v·ªÅ index.html 
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Qu·∫£n l√Ω ph√≤ng
let rooms = {}; // { roomId: { players: [{id, username}], boardNumbers: {}, gameActive: false, maxPlayers: 2, turnOrder: [], currentPlayerIndex: 0, creatorId: null } }
let chatMessages = []; // M·∫£ng l∆∞u tr·ªØ tin nh·∫Øn chat
let connectedUsers = 0; // ƒê·∫øm s·ªë ng∆∞·ªùi d√πng ƒëang k·∫øt n·ªëi

//  Qu·∫£n l√Ω tung ƒë·ªìng xu 
let coinToss = {
    roomId: null, // ID c·ªßa ph√≤ng ƒëang th·ª±c hi·ªán tung ƒë·ªìng xu
    player1: null, 
    player2: null, 
    player1Choice: null, 
    player2Choice: null, 
    result: null, // K·∫øt qu·∫£ c·ªßa l·∫ßn tung ƒë·ªìng xu 
    ready: false, // Th√¥ng b√°o c·∫£ hai ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn m·∫∑t ƒë·ªìng xu ch∆∞a
    firstChooser: null //Socket ID c·ªßa ng∆∞·ªùi ch∆°i ch·ªçn m·∫∑t ƒë·ªìng xu ƒë·∫ßu ti√™n trong v√°n hi·ªán t·∫°i
};

// H√†m reset tr·∫°ng th√°i tung ƒë·ªìng xu
function resetCoinToss(roomId) {
    coinToss = {
        roomId: roomId,
        player1: null,
        player2: null,
        player1Choice: null,
        player2Choice: null,
        result: null,
        ready: false,
        firstChooser: null // Reset c·∫£ bi·∫øn n√†y khi reset coinToss
    };
}

// L·∫•y th√¥ng tin c√°c ph√≤ng ƒëang c√≥ ng∆∞·ªùi ch∆°i
function getRoomsInfo() {
    const roomsInfo = {};
    for (const [roomId, room] of Object.entries(rooms)) {
        if (room.players.length > 0) { // Ch·ªâ l·∫•y ph√≤ng c√≥ ng∆∞·ªùi ch∆°i
            roomsInfo[roomId] = {
                players: room.players.map(p => ({ username: p.username })), // Ch·ªâ g·ª≠i username
                gameActive: room.gameActive,
                maxPlayers: room.maxPlayers // Th√™m maxPlayers
            };
        }
    }
    return roomsInfo;
}

// X·ª≠ l√Ω r·ªùi ph√≤ng
function leaveRoom(socket, roomId) {
    const room = rooms[roomId];
    if (!room) return false;

    const playerLeaving = room.players.find(p => p.id === socket.id);
    const username = playerLeaving ? playerLeaving.username : 'Ng∆∞·ªùi ch∆°i';

    // X√≥a ng∆∞·ªùi ch∆°i kh·ªèi ph√≤ng
    room.players = room.players.filter(player => player.id !== socket.id);
    delete room.boardNumbers[socket.id];

    socket.leave(roomId);
    delete socket.roomId;
    console.log(`üëã Player <span class="math-inline">\{username\} \(</span>{socket.id}) left room ${roomId}`);

    io.emit('chatMessage', {
        sender: 'H·ªá th·ªëng',
        message: `${username} ƒë√£ r·ªùi kh·ªèi ph√≤ng ${roomId}`,
        type: 'system'
    });

    if (room.players.length === 0) {
        delete rooms[roomId];
        console.log(`‚ùå Room ${roomId} deleted (no players remaining)`);
        io.emit('updateRooms', getRoomsInfo());
        return true;
    }

    // X·ª≠ l√Ω n·∫øu game ƒëang di·ªÖn ra
    if (room.gameActive) {
        // N·∫øu s·ªë ng∆∞·ªùi ch∆°i c√≤n l·∫°i √≠t h∆°n m·ª©c t·ªëi thi·ªÉu (v√≠ d·ª• < 2), k·∫øt th√∫c game
        if (room.players.length < 2) { // Ho·∫∑c < room.minPlayersForGame n·∫øu b·∫°n c√≥ logic ƒë√≥
            room.gameActive = false;
            io.to(roomId).emit('gameEndedByPlayerLeft', { message: `Tr√≤ ch∆°i k·∫øt th√∫c do ${username} r·ªùi ph√≤ng.` });
            // C√≥ th·ªÉ x√≥a ph√≤ng ho·∫∑c cho ph√©p ng∆∞·ªùi ch∆°i c√≤n l·∫°i tho√°t
        } else {
            // C·∫≠p nh·∫≠t turnOrder v√† currentPlayerIndex
            room.turnOrder = room.turnOrder.filter(playerId => playerId !== socket.id);
            if (room.turnOrder.length > 0) {
                // N·∫øu ng∆∞·ªùi r·ªùi ƒëi l√† ng∆∞·ªùi ƒëang c√≥ l∆∞·ª£t, chuy·ªÉn l∆∞·ª£t
                if (room.turnOrder[room.currentPlayerIndex % room.turnOrder.length] === undefined ||
                    !room.players.find(p => p.id === room.turnOrder[room.currentPlayerIndex % room.turnOrder.length])) {
                    room.currentPlayerIndex = room.currentPlayerIndex % room.turnOrder.length;
                    // ƒê·∫£m b·∫£o currentPlayerIndex h·ª£p l·ªá
                     if (room.currentPlayerIndex >= room.turnOrder.length) {
                        room.currentPlayerIndex = 0;
                    }
                }
                const nextPlayerId = room.turnOrder[room.currentPlayerIndex];
                const nextPlayer = room.players.find(p => p.id === nextPlayerId);
                io.to(roomId).emit('playerLeftUpdateTurn', {
                    playerId: socket.id,
                    message: `${username} ƒë√£ r·ªùi ph√≤ng.`,
                    nextPlayerId: nextPlayerId,
                    nextPlayerUsername: nextPlayer ? nextPlayer.username : '',
                    remainingPlayers: room.players.map(p => ({id: p.id, username: p.username}))
                });
            } else { // Kh√¥ng c√≤n ai trong turnOrder
                 room.gameActive = false;
                 io.to(roomId).emit('gameEndedByPlayerLeft', { message: `Tr√≤ ch∆°i k·∫øt th√∫c do kh√¥ng c√≤n ƒë·ªß ng∆∞·ªùi ch∆°i.` });
            }
        }
    }

    // Th√¥ng b√°o cho nh·ªØng ng∆∞·ªùi c√≤n l·∫°i trong ph√≤ng
    socket.to(roomId).emit('playerLeft', {
        playerId: socket.id,
        username: username, // G·ª≠i username ƒë·ªÉ client c√≥ th·ªÉ hi·ªÉn th·ªã
        message: `${username} ƒë√£ r·ªùi ph√≤ng.`,
        playersInRoom: room.players.length,
        maxPlayers: room.maxPlayers
    });

    io.emit('updateRooms', getRoomsInfo());
    return true;
}

// Ki·ªÉm tra v√† b·∫Øt ƒë·∫ßu game n·∫øu ƒë·ªß ƒëi·ªÅu ki·ªán
function checkGameStart(roomId) {
    const room = rooms[roomId];
    if (!room) return;

    // N·∫øu ƒë·ªß ng∆∞·ªùi ch∆°i v√† ƒë·ªß b·∫£ng s·ªë
    if (room.players.length === room.maxPlayers &&
        Object.keys(room.boardNumbers).length === room.maxPlayers) {

        room.gameActive = true;
        let firstPlayerId;

        if (room.maxPlayers === 2) {
            // Ph√≤ng 2 ng∆∞·ªùi: B·∫Øt ƒë·∫ßu tung ƒë·ªìng xu
            resetCoinToss(roomId); // ƒê·∫£m b·∫£o reset tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu m·ªõi
            coinToss.roomId = roomId;
            coinToss.player1 = room.players[0].id;
            coinToss.player2 = room.players[1].id;
            io.to(roomId).emit('startCoinToss'); // B√°o client b·∫Øt ƒë·∫ßu tung xu
             // firstPlayerId s·∫Ω ƒë∆∞·ª£c x√°c ƒë·ªãnh sau khi tung ƒë·ªìng xu
        } else {
            // Ph√≤ng 3+ ng∆∞·ªùi: Ng∆∞·ªùi t·∫°o ƒëi tr∆∞·ªõc, kh√¥ng tung ƒë·ªìng xu
            room.turnOrder = room.players.map(p => p.id); // T·∫°o th·ª© t·ª± l∆∞·ª£t ch∆°i ban ƒë·∫ßu
            room.currentPlayerIndex = room.turnOrder.findIndex(id => id === room.creatorId); // Ng∆∞·ªùi t·∫°o ƒëi tr∆∞·ªõc
            if (room.currentPlayerIndex === -1) room.currentPlayerIndex = 0; // Fallback n·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi t·∫°o
            firstPlayerId = room.turnOrder[room.currentPlayerIndex];

            io.to(roomId).emit('startGame', {
                roomId,
                players: room.players,
                firstPlayerId: firstPlayerId,
                maxPlayersInRoom: room.maxPlayers // G·ª≠i th√™m maxPlayers
            });
            console.log(`üöÄ Game started in room ${roomId} with ${room.maxPlayers} players. First turn: ${firstPlayerId}`);
        }
        io.emit('updateRooms', getRoomsInfo());
    }
}

// X·ª≠ l√Ω socket.io
io.on('connection', (socket) => {
    console.log('üîµ Ng∆∞·ªùi d√πng m·ªõi k·∫øt n·ªëi:', socket.id);
    connectedUsers++;

    // G·ª≠i l·ªãch s·ª≠ chat (n·∫øu c√≥) cho ng∆∞·ªùi d√πng m·ªõi
    socket.emit('allChatMessages', chatMessages);

    // X·ª≠ l√Ω chat
    socket.on('sendMessage', (data) => {
        const { message, sender } = data;
        const newMessage = { sender, message };

        chatMessages.push(newMessage); // Th√™m tin nh·∫Øn m·ªõi v√†o m·∫£ng 

        // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng tin nh·∫Øn ƒë∆∞·ª£c l∆∞u tr·ªØ 
        if (chatMessages.length > 100) {
            chatMessages.shift(); // X√≥a tin nh·∫Øn ƒë·∫ßu ti√™n
        }

        io.emit('chatMessage', newMessage); // G·ª≠i tin nh·∫Øn m·ªõi cho t·∫•t c·∫£

        console.log(`‚úâÔ∏è Message from ${sender}: ${message}`); // In ra console n·ªôi dung tin nh·∫Øn v√† ng∆∞·ªùi g·ª≠i
    });

    // G·ª≠i th√¥ng tin ph√≤ng khi c√≥ y√™u c·∫ßu
    socket.on('requestRooms', () => {
        socket.emit('updateRooms', getRoomsInfo());
    });

    // T·∫°o ph√≤ng
    socket.on('createRoom', (data) => { // data gi·ªù l√† object { username, maxPlayers }
        const { username, maxPlayers } = data;
        const roomId = Math.random().toString(36).substr(2, 6).toUpperCase();
        rooms[roomId] = {
            players: [{ id: socket.id, username }],
            boardNumbers: {},
            gameActive: false,
            maxPlayers: parseInt(maxPlayers) || 2, // M·∫∑c ƒë·ªãnh l√† 2 n·∫øu kh√¥ng c√≥
            turnOrder: [],
            currentPlayerIndex: 0,
            creatorId: socket.id // L∆∞u ng∆∞·ªùi t·∫°o ph√≤ng
        };

        socket.join(roomId);
        socket.roomId = roomId;
        socket.emit('roomCreated', { roomId, username, maxPlayers: rooms[roomId].maxPlayers }); // G·ª≠i maxPlayers v·ªÅ client
        socket.emit('waitingForOpponent', { roomId, currentPlayers: 1, maxPlayers: rooms[roomId].maxPlayers });


        io.emit('chatMessage', {
            sender: 'H·ªá th·ªëng',
            message: `${username} ƒë√£ t·∫°o ph√≤ng <span class="math-inline">\{roomId\} \(</span>{rooms[roomId].maxPlayers} ng∆∞·ªùi ch∆°i)`,
            type: 'system'
        });

        io.emit('updateRooms', getRoomsInfo());
        console.log(`‚úÖ Room ${roomId} created by <span class="math-inline">\{username\} \(</span>{socket.id}) for ${rooms[roomId].maxPlayers} players`);
    });

    // Tham gia ph√≤ng
    socket.on('joinRoom', (data) => {
        const { roomId, username } = data;
        const room = rooms[roomId];

        if (room) {
            if (room.players.length < room.maxPlayers) {
                const isPlayerAlreadyInRoom = room.players.some(p => p.id === socket.id);
                if (isPlayerAlreadyInRoom) {
                    socket.emit('errorMessage', 'B·∫°n ƒë√£ ·ªü trong ph√≤ng n√†y r·ªìi.');
                    return;
                }

                room.players.push({ id: socket.id, username });
                socket.join(roomId);
                socket.roomId = roomId;

                const opponentInfo = room.players.length > 1 ? room.players[0] : null; // Th√¥ng tin ng∆∞·ªùi ch∆°i ƒë·∫ßu ti√™n (n·∫øu c√≥)

                socket.emit('joinedRoom', {
                    roomId,
                    opponent: opponentInfo, // C√≥ th·ªÉ l√† null n·∫øu l√† ng∆∞·ªùi th·ª© 2 tham gia v√†o ph√≤ng tr·ªëng
                    playersInRoom: room.players.length,
                    maxPlayers: room.maxPlayers
                });

                // Th√¥ng b√°o cho nh·ªØng ng∆∞·ªùi kh√°c trong ph√≤ng
                socket.to(roomId).emit('playerJoined', {
                    player: { id: socket.id, username },
                    playersInRoom: room.players.length,
                    maxPlayers: room.maxPlayers
                });

                io.emit('chatMessage', {
                    sender: 'H·ªá th·ªëng',
                    message: `${username} ƒë√£ tham gia ph√≤ng ${roomId}`,
                    type: 'system'
                });

                if (room.players.length === room.maxPlayers) {
                    checkGameStart(roomId); // B·∫Øt ƒë·∫ßu game n·∫øu ƒë·ªß ng∆∞·ªùi
                } else {
                    socket.emit('waitingForOpponent', { roomId, currentPlayers: room.players.length, maxPlayers: room.maxPlayers });
                    // Th√¥ng b√°o cho nh·ªØng ng∆∞·ªùi ƒë√£ ·ªü trong ph√≤ng
                    socket.to(roomId).emit('updateWaitingInfo', { currentPlayers: room.players.length, maxPlayers: room.maxPlayers });
                }

                io.emit('updateRooms', getRoomsInfo());
                console.log(`üë§ Player <span class="math-inline">\{username\} \(</span>{socket.id}) joined room ${roomId}`);
            } else {
                socket.emit('errorMessage', 'Ph√≤ng ƒë√£ ƒë·ªß ng∆∞·ªùi.');
            }
        } else {
            socket.emit('errorMessage', 'Ph√≤ng kh√¥ng t·ªìn t·∫°i.');
        }
    });

    // X·ª≠ l√Ω r·ªùi ph√≤ng
    socket.on('leaveRoom', (roomId) => {
        if (leaveRoom(socket, roomId)) {
            // Update rooms list for all clients
            io.emit('updateRooms', getRoomsInfo());
        }
    });

    // X·ª≠ l√Ω ch·ªçn m·∫∑t ƒë·ªìng xu
    socket.on('chooseCoinSide', (data) => {
        const { roomId, choice } = data;
        if (coinToss.roomId === roomId) {
            if (!coinToss.firstChooser) {
                coinToss.firstChooser = socket.id;
                if (socket.id === coinToss.player1) {
                    coinToss.player1Choice = choice;
                } else if (socket.id === coinToss.player2) {
                    coinToss.player2Choice = choice;
                }
            } else {
                if (socket.id !== coinToss.firstChooser) {
                    if (coinToss.player1Choice && choice === coinToss.player1Choice) {
                        // Ng∆∞·ªùi ch∆°i 2 ch·ªçn tr√πng, t·ª± ƒë·ªông ƒë·ªïi v√† th√¥ng b√°o
                        const forcedChoice = choice === 'h√¨nh' ? 'ch·ªØ' : 'h√¨nh';
                        if (socket.id === coinToss.player1) {
                            coinToss.player1Choice = forcedChoice;
                        } else if (socket.id === coinToss.player2) {
                            coinToss.player2Choice = forcedChoice;
                        }
                        io.to(roomId).emit('forceCoinSide', forcedChoice); // Th√¥ng b√°o cho script
                    } else if (coinToss.player2Choice && choice === coinToss.player2Choice) {
                        // Ng∆∞·ªùi ch∆°i 2 ch·ªçn tr√πng, t·ª± ƒë·ªông ƒë·ªïi v√† th√¥ng b√°o
                        const forcedChoice = choice === 'h√¨nh' ? 'ch·ªØ' : 'h√¨nh';
                        if (socket.id === coinToss.player1) {
                            coinToss.player1Choice = forcedChoice;
                        } else if (socket.id === coinToss.player2) {
                            coinToss.player2Choice = forcedChoice;
                        }
                        io.to(roomId).emit('forceCoinSide', forcedChoice); 
                    } else {
                        if (socket.id === coinToss.player1) {
                            coinToss.player1Choice = choice;
                        } else if (socket.id === coinToss.player2) {
                            coinToss.player2Choice = choice;
                        }
                    }
                } else {
                    // Ng∆∞·ªùi ch∆°i ƒë·∫ßu ti√™n ch·ªçn l·∫°i th√¨ cho ph√©p
                    if (socket.id === coinToss.player1) {
                        coinToss.player1Choice = choice;
                    } else if (socket.id === coinToss.player2) {
                        coinToss.player2Choice = choice;
                    }
                }
            }

            // Ki·ªÉm tra xem c·∫£ hai ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn ch∆∞a
            if (coinToss.player1Choice && coinToss.player2Choice) {
                coinToss.result = Math.random() < 0.5 ? "ch·ªØ" : "h√¨nh";
                let firstPlayerGameId = (coinToss.player1Choice === coinToss.result) ? coinToss.player1 : coinToss.player2;

                // G·ª≠i k·∫øt qu·∫£ tung ƒë·ªìng xu
                io.to(roomId).emit('coinTossResult', {
                    result: coinToss.result,
                    firstPlayerId: firstPlayerGameId, // ID c·ªßa ng∆∞·ªùi ƒëi tr∆∞·ªõc trong game
                    player1Choice: coinToss.player1Choice,
                    player2Choice: coinToss.player2Choice
                });

                // Ngay sau khi c√≥ k·∫øt qu·∫£ tung ƒë·ªìng xu, b·∫Øt ƒë·∫ßu game cho ph√≤ng 2 ng∆∞·ªùi
                const room = rooms[roomId];
                if (room && room.maxPlayers === 2 && room.gameActive) { // ƒê·∫£m b·∫£o game ƒë√£ active v√† l√† ph√≤ng 2 ng∆∞·ªùi
                    room.turnOrder = [coinToss.player1, coinToss.player2]; // ƒê·∫∑t th·ª© t·ª± l∆∞·ª£t ch∆°i
                    room.currentPlayerIndex = room.turnOrder.findIndex(id => id === firstPlayerGameId);

                    io.to(roomId).emit('startGame', { // G·ª≠i s·ª± ki·ªán startGame sau khi c√≥ k·∫øt qu·∫£ tung ƒë·ªìng xu
                        roomId,
                        players: room.players,
                        firstPlayerId: firstPlayerGameId,
                        maxPlayersInRoom: room.maxPlayers
                    });
                    console.log(`üöÄ Game started in room ${roomId} (2 players) after coin toss. First turn: ${firstPlayerGameId}`);
                }
                resetCoinToss(roomId); // Reset sau khi s·ª≠ d·ª•ng
            }
        }
    });

    // Nh·∫≠n b·∫£ng s·ªë t·ª´ ng∆∞·ªùi ch∆°i
    socket.on('boardNumbers', (data) => {
        const { roomId, numbers, username } = data;
        if (rooms[roomId]) {
            rooms[roomId].boardNumbers[socket.id] = numbers;
            console.log(`üìã Received board numbers from ${username} (${socket.id}) in room ${roomId}`);

            // Ki·ªÉm tra n·∫øu ƒë·ªß 2 ng∆∞·ªùi ch∆°i v√† ƒë·ªß b·∫£ng s·ªë th√¨ b·∫Øt ƒë·∫ßu game
            checkGameStart(roomId);
        }
    });

    // ƒê√°nh d·∫•u s·ªë
    socket.on('markNumber', (data) => {
        const { roomId, number } = data;
        const room = rooms[roomId];

        if (room && room.gameActive) {
            // Ki·ªÉm tra c√≥ ph·∫£i l∆∞·ª£t c·ªßa ng∆∞·ªùi ch∆°i n√†y kh√¥ng
            if (room.turnOrder[room.currentPlayerIndex] !== socket.id) {
                // console.log(`Not your turn, ${socket.id}. Current turn: ${room.turnOrder[room.currentPlayerIndex]}`);
                // Kh√¥ng c·∫ßn g·ª≠i l·ªói, client n√™n t·ª± x·ª≠ l√Ω vi·ªác n√†y
                return;
            }

            // Chuy·ªÉn l∆∞·ª£t cho ng∆∞·ªùi ti·∫øp theo
            room.currentPlayerIndex = (room.currentPlayerIndex + 1) % room.turnOrder.length;
            const nextPlayerId = room.turnOrder[room.currentPlayerIndex];
            const nextPlayer = room.players.find(p => p.id === nextPlayerId);

            // G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi ch∆°i trong ph√≤ng v·ªÅ s·ªë ƒë∆∞·ª£c ƒë√°nh d·∫•u v√† l∆∞·ª£t ti·∫øp theo
            io.to(roomId).emit('numberMarked', {
                number,
                markerId: socket.id,
                nextPlayerId: nextPlayerId, // G·ª≠i ID ng∆∞·ªùi ch∆°i ti·∫øp theo
                nextPlayerUsername: nextPlayer ? nextPlayer.username : '' // G·ª≠i username ng∆∞·ªùi ch∆°i ti·∫øp theo
            });

            console.log(`üéØ Player ${socket.id} marked number ${number} in room ${roomId}. Next turn: ${nextPlayerId}`);
        }
    });

    // X·ª≠ l√Ω khi c√≥ ng∆∞·ªùi th·∫Øng
    socket.on('gameWon', (roomId) => {
        if (roomId && rooms[roomId]) {
            rooms[roomId].gameActive = false;
            io.to(roomId).emit('gameWon', {
                winner: socket.id
            });
            console.log(`üèÜ Player ${socket.id} won in room ${roomId}`);
        }
    });

    // X·ª≠ l√Ω ch∆°i l·∫°i
    socket.on('playAgain', (roomId) => {
        const room = rooms[roomId];
        if (room && room.players.length === room.maxPlayers) { // Ch·ªâ cho ch∆°i l·∫°i n·∫øu ƒë·ªß ng∆∞·ªùi
            room.boardNumbers = {};
            room.gameActive = true; // S·∫µn s√†ng cho game m·ªõi
            room.winner = null; // Reset ng∆∞·ªùi th·∫Øng

            let firstPlayerId;

            if (room.maxPlayers === 2) {
                resetCoinToss(roomId);
                coinToss.roomId = roomId;
                coinToss.player1 = room.players[0].id;
                coinToss.player2 = room.players[1].id;
                io.to(roomId).emit('startCoinToss'); // B·∫Øt ƒë·∫ßu l·∫°i tung xu cho ph√≤ng 2 ng∆∞·ªùi
                // firstPlayerId s·∫Ω ƒë∆∞·ª£c x√°c ƒë·ªãnh sau
            } else {
                // Ph√≤ng 3+ ng∆∞·ªùi, ng∆∞·ªùi t·∫°o ph√≤ng c≈© v·∫´n ƒëi tr∆∞·ªõc ho·∫∑c theo m·ªôt logic m·ªõi (v√≠ d·ª•: ng∆∞·ªùi th·∫Øng v√°n tr∆∞·ªõc)
                // Gi·ªØ nguy√™n logic ng∆∞·ªùi t·∫°o ƒëi tr∆∞·ªõc cho ƒë∆°n gi·∫£n
                room.turnOrder = room.players.map(p => p.id);
                room.currentPlayerIndex = room.turnOrder.findIndex(id => id === room.creatorId);
                if (room.currentPlayerIndex === -1) room.currentPlayerIndex = 0;
                firstPlayerId = room.turnOrder[room.currentPlayerIndex];

                // Th√¥ng b√°o game restart v√† ai ƒëi tr∆∞·ªõc
                io.to(roomId).emit('gameRestart', {
                    firstPlayerId: firstPlayerId,
                    players: room.players,
                    maxPlayersInRoom: room.maxPlayers
                });
            }

            // Y√™u c·∫ßu client g·ª≠i l·∫°i boardNumbers
            io.to(roomId).emit('requestNewBoardNumbers');


            console.log(`üîÑ Game restart initiated in room ${roomId}`);
        } else if (room) {
            io.to(socket.id).emit('errorMessage', 'Kh√¥ng ƒë·ªß ng∆∞·ªùi ch∆°i ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.');
        }
    });

    // Ng·∫Øt k·∫øt n·ªëi
    socket.on('disconnect', () => {
        console.log('üî¥ Ng∆∞·ªùi d√πng ng·∫Øt k·∫øt n·ªëi:', socket.id);
        connectedUsers--;

        console.log(`üë§ S·ªë ng∆∞·ªùi d√πng c√≤n l·∫°i: ${connectedUsers}`);

        // T√¨m ph√≤ng c·ªßa ng∆∞·ªùi ch∆°i b·ªã ng·∫Øt k·∫øt n·ªëi
        const roomId = socket.roomId;
        if (roomId) {
            if (leaveRoom(socket, roomId)) {
                // Update rooms list for all clients
                io.emit('updateRooms', getRoomsInfo());
            }
        }
    });
});

// Kh·ªüi ƒë·ªông server
http.listen(PORT, () => {
    console.log(`üöÄ Server is running at http://localhost:${PORT}`);
});